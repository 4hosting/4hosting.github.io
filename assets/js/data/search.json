[
  
  {
    "title": "K-Means Clustering Visualization",
    "url": "/posts/Clustering/",
    "categories": "K-Means, app, Clustering, Segmentation",
    "tags": "K-Means, Segmentation",
    "date": "2022-02-05 12:32:00 +0530",
    





    "snippet": "Language :RINTRODUCTIONIn this case study, we worked as a junior data analyst working on the marketing analyst team at Bellabeat, a high-tech manufacturer of health-focused products for women, and were given the task to analyze smart device data to gain insight into how consumers are using their smart devices. The insights we discover will then help guide marketing strategy for the company. We have to present our analysis as well as the insights and high-level recommendations to the executive team at Bellabeat.INSIGHTSInsight #1: Distribution of participants based on stepsOn an average, a person in the dataset walks 8338 steps in a day, with the median steps being 8054.Research by the mayo clinic suggests an average American walks 3000 to 4000 steps per day. The people in the dataset are definitely much more active than the general population, but it is still below the recommended goal of 10000 steps per day, which help reduce the risk of a number of common health problems including:  Heart disease  Obesity  Diabetes  High blood pressure  DepressionAverage alone as a number does not give us much information about the distribution. Taking a look at how the number of people changes with different steps per day for the 33 participants -"
  },
  
  {
    "title": "Recommender System",
    "url": "/posts/Recommender/",
    "categories": "Recommender System, app",
    "tags": "Recommender System, NLP",
    "date": "2022-02-01 12:32:00 +0530",
    





    "snippet": "Language :RINTRODUCTIONIn this case study, we worked as a junior data analyst working on the marketing analyst team at Bellabeat, a high-tech manufacturer of health-focused products for women, and were given the task to analyze smart device data to gain insight into how consumers are using their smart devices. The insights we discover will then help guide marketing strategy for the company. We have to present our analysis as well as the insights and high-level recommendations to the executive team at Bellabeat.INSIGHTSInsight #1: Distribution of participants based on stepsOn an average, a person in the dataset walks 8338 steps in a day, with the median steps being 8054.Research by the mayo clinic suggests an average American walks 3000 to 4000 steps per day. The people in the dataset are definitely much more active than the general population, but it is still below the recommended goal of 10000 steps per day, which help reduce the risk of a number of common health problems including:  Heart disease  Obesity  Diabetes  High blood pressure  DepressionAverage alone as a number does not give us much information about the distribution. Taking a look at how the number of people changes with different steps per day for the 33 participants -"
  },
  
  {
    "title": "Google Data Analytics Capstone, Bellabeat",
    "url": "/posts/Bellabeat/",
    "categories": "Data Analysis, Case Study",
    "tags": "R, Visualization",
    "date": "2021-12-01 12:32:00 +0530",
    





    "snippet": "Language :RINTRODUCTIONIn this case study, we worked as a junior data analyst working on the marketing analyst team at Bellabeat, a high-tech manufacturer of health-focused products for women, and were given the task to analyze smart device data to gain insight into how consumers are using their smart devices. The insights we discover will then help guide marketing strategy for the company. We have to present our analysis as well as the insights and high-level recommendations to the executive team at Bellabeat.INSIGHTSInsight #1: Distribution of participants based on stepsOn an average, a person in the dataset walks 8338 steps in a day, with the median steps being 8054.Research by the mayo clinic suggests an average American walks 3000 to 4000 steps per day. The people in the dataset are definitely much more active than the general population, but it is still below the recommended goal of 10000 steps per day, which help reduce the risk of a number of common health problems including:  Heart disease  Obesity  Diabetes  High blood pressure  DepressionAverage alone as a number does not give us much information about the distribution. Taking a look at how the number of people changes with different steps per day for the 33 participants -We can see that the distribution is closer to a normal distribution. Instead of analysing the entire population as a single group, it will be better to divide them into three groups:  Group A: Less than 6000 steps per day.  Group B: Between 6000 and 12000 steps per day.  Group C: More than 12000 steps per day.Taking a look at the distribution of each group -This tells us that there are close to 30%(A) people which are not very active and are close to a sedentary lifestyle, around 60%(B) of the people are moderately active which is the biggest chunk, and a little over 10%(C) of the people are very active.This will help us to analyze the population better and make suitable recommendations based on the group instead of just suggesting recommendations to the entire group as a whole.Insight #2: Analysis of steps on the basis of days of the weekWe were given the date for each observation, which is a very valuable piece of information, since it can help us to add granularity to our analysis. Instead of looking at the collective dataset at once, we can divide it based on days of the week and find out usage patterns as they vary across the entire week. Taking a look at the average steps again but divided on the week -This gives us very interesting insights! The most active day on average with the most number of steps is Saturday with almost 9000 steps, and last one is Sunday with only 7400 steps. This information is gold, because it tells us that the users of the fitness device partake in physical activities not only on the weekday, but also on the weekend. One hypothesis that can be drawn from this is that most people in this dataset give special attention to their health on Saturday after a week of work, and have a rest day on Sunday. This will potentially help us to make business recommendations later on.Taking a glance at the same data for individual participants for any surprises -The data is quite varied across the population, therefore adding our useful groupings to the same helps make sense of it much better -For the first group A- the most active days are Monday and Saturday, for B- Tuesday and Saturday, and for C- Tuesday, Wednesday and Saturday. This tells us that Saturday is an important day for people from all the three groups, followed by a high activity day in the week. Also, Sunday is the least active, supporting our assumption that it is a rest day for everyone.To drive our point home and make this data a little easier to read, we can combine the weekdays into a group and show the same results - Insight #3: Sleep vs Activity of the dayIt would be easy(and wrong!) to assume that more activity or more steps that day would lead to more time asleep. Sleep is a very subjective quality, and varies not just across individuals, but also for the same person, and can depend on numerous factors including health, work, psychological and mental state, and so much more.Checking the correlation between these variables gives us a number of -0.24, and this is further supported by this scatter plot -This does not indicate any correlation between the two, and it is safe to conclude that total time slept does not depend on the activity (steps taken) for that day.Insight #4: Analysis of sleep on the basis of days of the weekContinuing a similar analysis for what we did on the number of steps, we take a look at the average time slept per day of the week -Further supporting our hypothesis of the rest day, we see that participants slept the most on Sunday, with the average being around 8 hours. This was followed by around 7.5 hours on Saturday and less than 7 hours on the weekdays.Applying our groupings based on steps and further weeks on this analysis -This chart gives us wonderful insights into how the sleeping pattern varies across the different groups-  For the least active Group A, sleeping time was almost constant throughout the week, around 7.4 hours.  For moderately active Group B, sleep was lowest on the weekdays around 7 hours, and around 8 hours on the weekends, with Sundays taking a slight edge.  For the very active Group C, sleep was very low on the weekdays at around 5.4 hours, around 6 hours on Saturday, which was the most active day, and at a stark contrast from others at around 9 hours on Sunday, the rest day!Insight #5: Sleep vs Sedentary time of the dayThe column including Sedentary data had a number of errors, and was quite misleading. Upon inspection, it was found out that 28% of the observations had Sedentary time more than 20 hours from the 24 hours of the day, more than 55% of the observations had it more than 16 hours. This led me to a hypothesis that this value is in fact the complete sedentary activity throughout the day, including sleep time. This was further supported by the fact that over 8% of the observations had Sedentary time as 24 hours, with a few hours for sleep.Therefore, to get the actual sedentary time, i.e., time spent is sedentary activity, apart from the time spent on the bed for sleeping, I subtracted the time spent on bed from the given sedentary time.Next, I plotted a scatterplot for Sleep and the corrected Sedentary time for each observation -This again proved to be a very important result as checking the correlation between corrected sedentary time and sleep hours gave a value of -0.76 on a scale of -1 to +1. This is a high negative value, and indicates that the more time you spent on Sedentary Activity throughout the day, the less time you actually slept. In other words, people engaged in some form of activity slept more (and arguably better) than the people who chose a sedentary lifestyle. This will also be used to guide business recommendations later.RECOMMENDATIONSBased on the insights above, we have come up with the following recommendations. These features could be added to the mobile application of these devices, as well as the reminders can be added as a vibration to the current devices, as well as a digital message on the on future devices which may have a display.  Since we divided the population into three groups as A-Sedentary, B-Moderately Active and C-Very Active, it would be best to tailor different recommendations and marketing strategies for each group.          For group A, where the number of steps are much lower than the average, we can motivate them to be more active by creating awareness about the benefits of being more active, the positive effects it will have on their life, as well as informing them of the risks associated with sedentary lifestyle from time to time.      For group B, who are moderately active, we can give them positive reinforcement that they are doing well, and add timely messages to inform them about the little extra that they need to do to get above the recommended numbers. Also, as these are regular users, we can add options of streaks for continuous days worked, which would further enhance their chances to be regular in their workout, and use this device to maintain their streak.      For group C, which is the most active group, the participants regularly engage in physical activities, which could span a number of categories like gym, trekking, running, etc. So, if we did a survey on these people to collect the top categories, and added ways to analyze those complex modes, incorporating them as workout modes, they would be more probable to take this device with them the next time they engage in those.        Majority of the people across all the groups were most active on Saturday, followed by a day in the mid-week, and least active on Sunday. We can motivate them with positive messages and quotes on Saturday morning so that they are more likely to go ahead with their workout, and could help to make up their mind if they were deciding between working out or skipping workout that day. Also, since most people took a rest on Sunday, we can give them timely reminders about the benefits of a good rest day in the week throughout that day.  Since there was an obvious negative correlation between the Sedentary time spent throughout the day and the time slept, this could be used to motivate the participants to choose a more active lifestyle in order to sleep more and sleep better. Their sleep schedule can also be analyzed, and give them reminders an hour before their sleep time to reduce screen time and work for a better sleep at night.METHODOLOGYHere, we will summarize the process we went through to complete this analysis. This is divided into six phases - Ask, Prepare, Process, Analyze, Share and Act.AskQ: What is the problem we are trying to solve?A: The big-picture problem we are trying to solve is to unlock Bellabeat’s potential and convert it to a large player in the global smart device market. The company needs marketing strategies and a complete business plan for this to happen. The analytics team needs to come up with some of those strategies, mainly - analyzing how non-Bellabeat smart-device owners are using their devices, and implementing the insights from the trends in that data to improve Bellabeat products.Primary Stakeholder: Urška Sršen- Bellabeat’s co founder and Chief Creative OfficerSecondary Stakeholders: Sando Mur- Mathematician and Bellabeat’s cofounder (key member of the Bellabeat executive team), as well as Bellabeat marketing analytics team.Business task: Analyze the smart device data provided to draw insights into device usage patterns, and make recommendations to drive marketing strategies.PrepareThe data for this analysis has been downloaded from ‘https://www.kaggle.com/arashnic/fitbit’.The dataset contains personal fitness tracker data from thirty fitbit users. This includesinformation about daily activity, steps, and heart rate that can be used to explore users’ habits. Some of these metrics are on the basis of days, i.e., one reading per day, while some of them contain one reading per minute.This data is available in the Public Domain (CC0), and adheres to the standards of data ethics and privacy. The users consented to the submission of personal tracker data, including minute-level output for physical activity, heart rate, and sleep monitoring, and no personal information was included in any of these datasets.Apart from this, sadly the data does not ROCCC. It wasn’t very reliable, with multiple errors and inconsistencies within the dataset. Although it was original, as fitbit collected it using their own devices, it wasn’t comprehensive as several observations for multiple users were very limited or not available at all. This was also for one month of 2016, and wasn’t current data. Also, this data wasn’t vetted or cited, as there was no mention of fitbit checking or approving this dataset.ProcessFor this analysis, we will be using R for the complete data analysis process. Its package ‘tidyverse’ contains a number of useful packages and is extremely versatile, covering all the tools needed to work with the dataset. For visualizations, we will be using ggplot2, and later on Tableau to create a dashboard.The Data Cleaning Process:  For the first dataset DayActivity:          There were 33 participants, but the records for each participant were not equal. Participant Id - 4057192912 contained only 4 observations, and would have affected our analysis creating a bias in favor of only 4 values, which did not span even a week, and thus was removed from the dataset. The remaining participants had at least 18 records.      There were a number of observations where the TotalSteps, and all the corresponding variables were 0. The SedentaryTime for these rows was also 1440 minutes or 24 hours. There must have been some error in collection of these records as they must have been skipped, and these had to be removed too.      Similarly, there were certain observations where the Sedentary Time was 24 hours indicating no movement throughout the day, and the steps being 3000-12000. This was also clearly an error and these records were removed too. This was also done where the sleep was more than a minute and SedentaryTime was 0.      An outlier with steps = 36019 from participantId = 2, where the average and the mean for that participant were below 5000 steps, as it would have affected the averages considerably.      Date was converted from “m/d/y” to “m-d-y” to make it compatible with further functions.        For the second dataset SleepDay:          There were 24 participants, out of which 8 participants had 5 records or less, and one had 8 records. All these participants were removed and the new minimum records for a participant was 15, which was at least two weeks worth of records.      Outliers for the sleep dataset were not removed because they did seem plausible, as sleep is a very subjective quality in itself.      While plotting SedentaryTime vs TotalTimeAsleep, a handful of records had a higher value for TotalTimeinBed than SedentaryTime. This was again part of the ambiguity with the Sedentary time column, and in accordance to our previous assumption, supported by a number of key factors, all those records were removed too.      Sleep data had date-time instead of data. String functions were used to split on “ “ (space), and the extracted data was used to merge with the activity dataset.      Observations where the corrected sedentary time was less than 0 were not considered for the correlation.      Analyze and ShareI have combined the analysis and visualization part, because one often gives insights into the other.  Starting with the clean data, the first step was to get an idea of the distribution of data. The summary() function was of help here to get information about the mean, median, maximum and minimum values, etc of all the required columns.  To get more information than just a mean, Total steps were plotted against their frequency in a binned bar chart. Three groups of width 6000 steps were made from this - A, B and C, and these were used for all further analysis.  wday function of lubridate was used to calculate which day of the week that date belonged to, and a column with a label for each date was added, with 1=Sunday, 2=Monday, and so on till 7=Saturday.  The dataset was grouped on these weekdays to get a more granular analysis of activity throughout the week.  Using the previously assigned groups, a column to assign a group label (A, B, C) was added, and the data was grouped into these, then again divided on the weekday.  To make it a bit easier to understand, a new label was assigned where Mon-Fri was assigned WEEK, and the same analysis was carried out as above. It has three bars now - Saturday, Sunday and Weekday.  Activity and sleep datasets were merged on Id and ActivityDate.  Correlation scatter-plot was drawn for time slept and steps taken.  Sleep distribution was calculated over the days of the week, and was further divided into our groups and again plotted on a bar chart.  A new column for corrected Sedentary time was introduced with the value being the difference between the corrected time and total time in bed, and a scatter plot was drawn for the same, along with a correlation value.A detailed analysis with all the code and the output is available in the appendix.Act  Several insights were drawn from this analysis, and are shared comprehensively in the Insights Section of this page.  3 key recommendations were also made for the mobile app or display of future smart products, shared on the Recommendations Section.APPENDIX: WALKTHROUGHStep 0: Installing and importing packagesinstall.packages(tidyverse)install.packages(skimr)install.packages(lubridate)library(tidyverse)## -- Attaching packages --------------------------------------- tidyverse 1.3.1 --## v ggplot2 3.3.5     v purrr   0.3.4## v tibble  3.1.6     v dplyr   1.0.7## v tidyr   1.1.4     v stringr 1.4.0## v readr   2.1.0     v forcats 0.5.1library(skimr)library(tibble)library(lubridate)Step 1: Importing and Cleaning ActivityThis will be the first dataset we will be analyzing.Importing the datasetactivity &amp;lt;- read.csv(&#39;C://Users/hamda/Desktop/Portfolio Projects/3 Google/data/dailyActivity_merged.csv&#39;)Quick summary of the datastr(activity)## &#39;data.frame&#39;:    940 obs. of  15 variables:##  $ Id                      : num  1.5e+09 1.5e+09 1.5e+09 1.5e+09 1.5e+09 ...##  $ ActivityDate            : chr  &quot;4/12/2016&quot; &quot;4/13/2016&quot; &quot;4/14/2016&quot; &quot;4/15/2016&quot; ...##  $ TotalSteps              : int  13162 10735 10460 9762 12669 9705 13019 15506 10544 9819 ...##  $ Total Distance           : num  8.5 6.97 6.74 6.28 8.16 ...##  $ TrackerDistance         : num  8.5 6.97 6.74 6.28 8.16 ...##  $ LoggedActivitiesDistance: num  0 0 0 0 0 0 0 0 0 0 ...##  Very Active Distance      : num  1.88 1.57 2.44 2.14 2.71 ...##  $ ModeratelyActiveDistance: num  0.55 0.69 0.4 1.26 0.41 ...##  $ LightActiveDistance     : num  6.06 4.71 3.91 2.83 5.04 ...##  Sedentary Activity Distance : num  0 0 0 0 0 0 0 0 0 0 ...##  $ VeryActiveMinutes       : int  25 21 30 29 36 38 42 50 28 19 ...##  $ FairlyActiveMinutes     : int  13 19 11 34 10 20 16 31 12 8 ...##  $ LightlyActiveMinutes    : int  328 217 181 209 221 164 233 264 205 211 ...##  $ SedentaryMinutes        : int  728 776 1218 726 773 539 1149 775 818 838 ...##  $ Calories                : int  1985 1797 1776 1745 1863 1728 1921 2035 1786 1775 ...Working with the datasetNumber of participants:n_distinct(activity$Id)## [1] 33This tells us that there are 33 distinct participants in this dataset.To make it easier to work with and visualize the data, we will be addingan identifier for the ID, from 1-33activity &amp;lt;- activity %&amp;gt;%   mutate(partID = as.integer(as.factor(Id)))activity %&amp;gt;%   group_by(partID) %&amp;gt;%   summarize(Id = mean(Id))## # A tibble: 33 x 2##    partID         Id##     &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;##  1      1 1503960366##  2      2 1624580081##  3      3 1644430081##  4      4 1844505072##  5      5 1927972279##  6      6 2022484408##  7      7 2026352035##  8      8 2320127002##  9      9 2347167796## 10     10 2873212765## # ... with 23 more rowsBefore we proceed with the analysis, we need to count the number ofobservations for each participant. This will ensure that the results arefair and doesn’t skew in favour of one participant.activity %&amp;gt;%   group_by(Id, partID) %&amp;gt;%   count() %&amp;gt;%   arrange(n)## # A tibble: 33 x 3## # Groups:   Id, partID [33]##            Id partID     n##         &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;##  1 4057192912     14     4##  2 2347167796      9    18##  3 8253242879     29    19##  4 3372868164     11    20##  5 6775888955     24    26##  6 7007744171     26    26##  7 6117666160     22    28##  8 6290855005     23    29##  9 8792009665     32    29## 10 1644430081      3    30## # ... with 23 more rowsWe listed the number of observations for each participant in ascendingorder and found that for partID = 14, there were only 4 observations inthe dataset. This will therefore not be useful in further analysis andhas to be removed. There are a few more with 18-20 days of data, whichalthough not ideal, will give us their information for around 3 weeksand will enable us to find trends in their usage pattern.Removing observations for participant-14.activity &amp;lt;- activity[ !(activity$partID == 14), ]Checking removed observationsactivity %&amp;gt;%   group_by(Id, partID) %&amp;gt;%   count() %&amp;gt;%   arrange(n)## # A tibble: 32 x 3## # Groups:   Id, partID [32]##            Id partID     n##         &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;##  1 2347167796      9    18##  2 8253242879     29    19##  3 3372868164     11    20##  4 6775888955     24    26##  5 7007744171     26    26##  6 6117666160     22    28##  7 6290855005     23    29##  8 8792009665     32    29##  9 1644430081      3    30## 10 3977333714     12    30## # ... with 22 more rowsTaking a look at the statistics of the dataset nowactivity %&amp;gt;%   select(TotalSteps, Calories, SedentaryMinutes) %&amp;gt;%   summary()##    TotalSteps       Calories    SedentaryMinutes##  Min.   :    0   Min.   :   0   Min.   :   0.0  ##  1st Qu.: 3790   1st Qu.:1830   1st Qu.: 729.0  ##  Median : 7441   Median :2134   Median :1057.0  ##  Mean   : 7654   Mean   :2305   Mean   : 990.2  ##  3rd Qu.:10734   3rd Qu.:2794   3rd Qu.:1226.8  ##  Max.   :36019   Max.   :4900   Max.   :1440.0A closer look at the summary statistics tell us that there areobservations in the data where the TotalSteps for the day is zero. Thisis not possible and we hypothesise that these must be erroneousobservations. We need to take a closer look at those rows.activity %&amp;gt;%   filter(TotalSteps==0) %&amp;gt;%   head()##           Id ActivityDate TotalSteps TotalDistance TrackerDistance## 1 1503960366    5/12/2016          0             0               0## 2 1844505072    4/24/2016          0             0               0## 3 1844505072    4/25/2016          0             0               0## 4 1844505072    4/26/2016          0             0               0## 5 1844505072     5/2/2016          0             0               0## 6 1844505072     5/7/2016          0             0               0##   LoggedActivitiesDistance VeryActiveDistance ModeratelyActiveDistance## 1                        0                  0                        0## 2                        0                  0                        0## 3                        0                  0                        0## 4                        0                  0                        0## 5                        0                  0                        0## 6                        0                  0                        0##   LightActiveDistance SedentaryActiveDistance VeryActiveMinutes## 1                   0                       0                 0## 2                   0                       0                 0## 3                   0                       0                 0## 4                   0                       0                 0## 5                   0                       0                 0## 6                   0                       0                 0##   FairlyActiveMinutes LightlyActiveMinutes SedentaryMinutes Calories partID## 1                   0                    0             1440        0      1## 2                   0                    0             1440     1347      4## 3                   0                    0             1440     1347      4## 4                   0                    0             1440     1347      4## 5                   0                    0             1440     1348      4## 6                   0                    0             1440     1347      4This gives us a very important insight into the dataset. It could havebeen assumed from the mean of SedentaryMinutes (990 mins = 16.5 hours)these are Sedentary Minutes for the day, which would be a very largevalue. We see from the following rows that they have value for them as1440 minutes or 24 hours. Therefore: - These observations have to beremoved. - Sedentary Minutes are for the complete duration of the day,including sleep.Removing such rows:activity &amp;lt;- activity[ !(activity$TotalSteps == 0), ]Again taking a look at the summary statistics:activity %&amp;gt;%   select(TotalSteps, Calories, SedentaryMinutes) %&amp;gt;%   summary()##    TotalSteps       Calories    SedentaryMinutes##  Min.   :    4   Min.   :  52   Min.   :   0.0  ##  1st Qu.: 4924   1st Qu.:1856   1st Qu.: 721.0  ##  Median : 8056   Median :2220   Median :1020.5  ##  Mean   : 8331   Mean   :2362   Mean   : 955.1  ##  3rd Qu.:11100   3rd Qu.:2833   3rd Qu.:1189.0  ##  Max.   :36019   Max.   :4900   Max.   :1440.0Checking other statisticsactivity %&amp;gt;%   arrange(desc(SedentaryMinutes)) %&amp;gt;%   select(Id, partID, TotalSteps, SedentaryMinutes) %&amp;gt;%   head()##           Id partID TotalSteps SedentaryMinutes## 1 4319703577     15       7753             1440## 2 4388161847     16      10122             1440## 3 8583815059     31       5319             1440## 4 8583815059     31       3008             1440## 5 8583815059     31       8469             1440## 6 8583815059     31      12015             1440These are further erroneous observations where the SedentaryMinutes arementioned as 1440 or 24 hours, meaning there was no movement at allthroughout the day, but the user took more than 3000 steps at least.This was probably some bug in the device or database, and these need tobe removed too.There are several more observations with only a minute of movement inthe entire 24 hour duration. At first glance, we wanted to remove theseas they don’t seem plausible, but we have to put our biases aside andconsider them, since their steps match that minute mark too.activity &amp;lt;- activity[ !(activity$SedentaryMinutes == 1440 | activity$SedentaryMinutes == 0), ]Checking data after removing observations observationsactivity %&amp;gt;%   group_by(Id, partID) %&amp;gt;%   count() %&amp;gt;%   arrange(n)## # A tibble: 32 x 3## # Groups:   Id, partID [32]##            Id partID     n##         &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;##  1 1927972279      5    17##  2 4020332650     13    17##  3 6775888955     24    17##  4 2347167796      9    18##  5 8253242879     29    18##  6 8792009665     32    19##  7 3372868164     11    20##  8 1844505072      4    21##  9 6117666160     22    23## 10 6290855005     23    24## # ... with 22 more rowsOur total observation set has decreased by quite a bit, but at least ifwill not guide us towards wrong outcomes. This highlights the importanceof clean data.activity %&amp;gt;%   select(TotalSteps, Calories, SedentaryMinutes) %&amp;gt;%  summary()##    TotalSteps       Calories    SedentaryMinutes##  Min.   :    4   Min.   :  52   Min.   :   2.0  ##  1st Qu.: 4928   1st Qu.:1855   1st Qu.: 720.8  ##  Median : 8062   Median :2214   Median :1019.5  ##  Mean   : 8350   Mean   :2362   Mean   : 952.2  ##  3rd Qu.:11102   3rd Qu.:2832   3rd Qu.:1187.0  ##  Max.   :36019   Max.   :4900   Max.   :1439.0The data is mainly clean now, but we should still take special care ofthe corner cases when doing our analysis, and do a sanity check on theoutcomes we get.A box plot will be ideal now to get a visual sense of the distribution ofdata and spotting the remaining outliers.activity %&amp;gt;%   ggplot(mapping = aes(    x=as.character(partID),     y=TotalSteps,    fill=&quot;Red&quot;)    ) +  geom_boxplot() +   guides(fill=&quot;none&quot;) +   labs(x=&quot;Participants&quot;, y=&quot;Total Number of Steps&quot;,       title = &quot;Statistical analysis of Average Steps vs Participants&quot;)  #filter(TotalSteps != 36019) to remove the outlier and condense the plotactivity &amp;lt;- activity %&amp;gt;%   filter(TotalSteps != 36019)The data looks statistically alright now, not ideal but we can work withthis.Step 2: Analysis and Viz of ActivityThe mean of average steps came out to be 8350. This number alone doesn’ttell us much, and we will have to dive deeper to make sense of thedistribution of this number.activity_avg &amp;lt;- activity %&amp;gt;%   group_by(partID) %&amp;gt;%   summarize(Id = mean(Id),            AvgSteps = mean(TotalSteps),            AvgCalories = mean(Calories),            )activity_avg## # A tibble: 32 x 4##    partID         Id AvgSteps AvgCalories##     &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;##  1      1 1503960366   12521.       1877.##  2      2 1624580081    4735.       1443.##  3      3 1644430081    7283.       2811.##  4      4 1844505072    3809.       1714.##  5      5 1927972279    1671.       2303.##  6      6 2022484408   11371.       2510.##  7      7 2026352035    5567.       1541.##  8      8 2320127002    4717.       1724.##  9      9 2347167796    9520.       2043.## 10     10 2873212765    7556.       1917.## # ... with 22 more rowsactivity_avg %&amp;gt;%   ggplot(mapping = aes(x=AvgSteps/1000, fill=&quot;Red&quot;)) +   geom_bar(bins = 5) +  scale_x_binned() +  guides(fill=&quot;none&quot;) +   labs(x=&quot;Average steps taken per day x1000&quot;,        y = &quot;Number of participants&quot;,       title = &quot;Distribution of participants based on average steps&quot;)This gives the first concrete information about the users-Out of the 32 users, 9 took less than 6000 steps per day, 19 took between 6000-12000 steps per day, and 4 took more than 12000 steps per day.Adding more granularity to our analysis, we will add a weekday to theobservations based on the date and see how their analysis varies fromweekday to weekend.# First we have to convert date to standard %m-%d-%y formatdashed &amp;lt;- gsub(&quot;/&quot;, &quot;-&quot;, activity$ActivityDate)head(dashed)## [1] &quot;4-12-2016&quot; &quot;4-13-2016&quot; &quot;4-14-2016&quot; &quot;4-15-2016&quot; &quot;4-16-2016&quot; &quot;4-17-2016&quot;# Then add a label to it, SUN = 1, MON = 2 using lubridate&#39;s wdaydaylabel &amp;lt;-   wday((mdy(dashed)),week_start=getOption(&quot;lubridate.week.start&quot;, 7))head(daylabel)## [1] 3 4 5 6 7 1#Appending those values back to the tableactivity &amp;lt;- mutate(activity, weekday = daylabel)activity %&amp;gt;%   select(partID, Id, ActivityDate, weekday) %&amp;gt;%   head()##   partID         Id ActivityDate weekday## 1      1 1503960366    4/12/2016       3## 2      1 1503960366    4/13/2016       4## 3      1 1503960366    4/14/2016       5## 4      1 1503960366    4/15/2016       6## 5      1 1503960366    4/16/2016       7## 6      1 1503960366    4/17/2016       1We can indeed confirm that 4/12/2016(3) was a Tuesday and 4/17/2016 wasa Sunday(1).Creating a summarized dataset based on the weekdays:weekActivity &amp;lt;- activity %&amp;gt;%   group_by(weekday) %&amp;gt;%   summarize(    avgWsteps = mean(TotalSteps),     sedWmins = mean(SedentaryMinutes),    avgWveryact = mean(VeryActiveMinutes),    avgWcals = mean(Calories)  )weekActivity## # A tibble: 7 x 5##   weekday avgWsteps sedWmins avgWveryact avgWcals##     &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;## 1       1     7406.     940.        20.7    2306.## 2       2     8488.     986.        25.4    2381.## 3       3     8953.     961.        26.0    2435.## 4       4     8207.     948.        22.8    2338.## 5       5     8247.     928.        21.6    2290.## 6       6     7853.     979.        21.2    2359.## 7       7     8979.     925.        24.0    2426.Plotting weekday vs Average Steps for that dayweekActivity %&amp;gt;%   ggplot(mapping = aes(x=weekday, y=avgWsteps, fill=-avgWsteps)) +  geom_col() +  labs(y=&quot;Average steps per day&quot;,        x=&quot;Day of the week&quot;,       title = &quot;Average steps taken on each day of the week&quot;) + guides(fill=&quot;none&quot;) +   geom_text(aes(label = lapply(avgWsteps, as.integer)), vjust=2, colour = &quot;white&quot;) +  scale_x_continuous(breaks = c(1,2,3,4,5,6,7), labels = c(&quot;SUN&quot;, &quot;MON&quot;, &quot;TUE&quot;, &quot;WED&quot;, &quot;THU&quot;, &quot;FRI&quot;, &quot;SAT&quot;)) Anumber of insights can be derived from this data, but first we need tosee that the observations of each day are evenly distributed so theydon’t create a bias.activity %&amp;gt;%   count(weekday)##   weekday   n## 1       1 108## 2       2 109## 3       3 134## 4       4 137## 5       5 132## 6       6 119## 7       7 112There are some more observations for the middle days of the week, butsince every observation is over 100, and the difference in number isless, this can be considered.weekPartActivity &amp;lt;- activity %&amp;gt;%   group_by(partID, weekday) %&amp;gt;%   summarize(    Id = mean(Id),    steps = mean(TotalSteps),    seden = mean(SedentaryMinutes),    cals = mean(Calories)  )## `summarise()` has grouped output by &#39;partID&#39;. You can override using the `.groups` argument.head(weekPartActivity)## # A tibble: 6 x 6## # Groups:   partID [1]##   partID weekday         Id  steps seden  cals##    &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;## 1      1       1 1503960366 10102.  638  1769 ## 2      1       2 1503960366 13781.  899  1939.## 3      1       3 1503960366 13947.  780. 1968.## 4      1       4 1503960366 12657.  910  1869.## 5      1       5 1503960366 11876.  924. 1852 ## 6      1       6 1503960366 11466.  878  1826.#Plotting these:weekPartActivity %&amp;gt;%   ggplot(mapping = aes(    x=as.character(weekday),     y=steps,     fill=-steps)    ) +  guides(fill=&quot;none&quot;) +  geom_col() + facet_wrap(~partID, nrow = 4) +   labs(    x=&quot;Days of the week (1-SUN)&quot;,     y=&quot;Average steps taken per day&quot;,    title = &quot;A look at steps per weekday for each participant&quot;    )groupings &amp;lt;- activity %&amp;gt;%   group_by(partID) %&amp;gt;%   summarize(avgstep = mean(TotalSteps)) %&amp;gt;%   mutate(stepGroup = case_when(    avgstep &amp;lt; 6000 ~ &#39;A&#39;,    avgstep &amp;gt; 6000 &amp;amp; avgstep &amp;lt; 12000 ~ &#39;B&#39;,    avgstep &amp;gt; 12000 ~ &#39;C&#39;  ))groupings %&amp;gt;%   head()## # A tibble: 6 x 3##   partID avgstep stepGroup##    &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    ## 1      1  12521. C        ## 2      2   4735. A        ## 3      3   7283. B        ## 4      4   3809. A        ## 5      5   1671. A        ## 6      6  11371. BCreating a function similar to VLOOKUP in spreadsheetsactivity &amp;lt;- merge(groupings, activity, by = &#39;partID&#39;)activity %&amp;gt;%   select(partID, TotalSteps, avgstep, stepGroup) %&amp;gt;%   head()##   partID TotalSteps  avgstep stepGroup## 1      1      13162 12520.63         C## 2      1      10735 12520.63         C## 3      1      10460 12520.63         C## 4      1       9762 12520.63         C## 5      1      12669 12520.63         C## 6      1       9705 12520.63         CgroupedActivity &amp;lt;- activity %&amp;gt;%   group_by(stepGroup, weekday) %&amp;gt;%   summarize( avgsteps = mean(TotalSteps))## `summarise()` has grouped output by &#39;stepGroup&#39;. You can override using the `.groups` argument.groupedActivity %&amp;gt;%   head()## # A tibble: 6 x 3## # Groups:   stepGroup [1]##   stepGroup weekday avgsteps##   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;## 1 A               1    3545 ## 2 A               2    4694.## 3 A               3    4223.## 4 A               4    4520.## 5 A               5    4273.## 6 A               6    3780.groupedActivity %&amp;gt;%   ggplot(mapping = aes(    x=as.character(weekday),     y=avgsteps/1000,    fill=stepGroup)    ) +  geom_col() + facet_wrap(~stepGroup) +  labs(x = &quot;Weekday&quot;,        y = &quot;Average Steps x1000&quot;,       title = &quot;Grouped distibution of average steps per weekday&quot;,       subtitle = &quot;A: &amp;lt;6000,                      B: 6000-12000,           C: &amp;gt;12000&quot;)msun &amp;lt;- mean(activity$TotalSteps[activity$weekday %in% c(1)])msat &amp;lt;- mean(activity$TotalSteps[activity$weekday %in% c(7)])mweek &amp;lt;- mean(activity$TotalSteps[activity$weekday %in% c(2:6)])data.frame(&quot;Day&quot; = c(&quot;Sunday&quot;, &quot;Weekday&quot;, &quot;Saurday&quot;),           &quot;average&quot; = c(msun, mweek, msat)) %&amp;gt;%   ggplot(mapping = aes(x=Day, y=average, fill=-average))+  geom_col() +   geom_text(aes(label = lapply(average, as.integer)),             vjust=2, colour = &quot;white&quot;) +   guides(fill=&quot;none&quot;) +   labs(y=&quot;Average steps taken&quot;,       title = &quot;Average steps taken per weekend/weekday&quot;)activity &amp;lt;- activity %&amp;gt;%   mutate(    breaklabel = case_when(      activity$weekday %in% c(1) ~ &#39;SUN&#39;,      activity$weekday %in% c(7) ~ &#39;SAT&#39;,      activity$weekday %in% c(2:6) ~ &#39;WEEK&#39;    )  )activity %&amp;gt;%   select(weekday, breaklabel) %&amp;gt;%   head()##   weekday breaklabel## 1       3       WEEK## 2       4       WEEK## 3       5       WEEK## 4       6       WEEK## 5       7        SAT## 6       1        SUNactiv_step_week &amp;lt;- activity %&amp;gt;%   group_by(stepGroup, breaklabel) %&amp;gt;%   summarize(    steps = mean(TotalSteps)  )## `summarise()` has grouped output by &#39;stepGroup&#39;. You can override using the `.groups` argument.activ_step_week## # A tibble: 9 x 3## # Groups:   stepGroup [3]##   stepGroup breaklabel  steps##   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;## 1 A         SAT         4605.## 2 A         SUN         3545 ## 3 A         WEEK        4288.## 4 B         SAT         9669.## 5 B         SUN         7823.## 6 B         WEEK        8715.## 7 C         SAT        14307 ## 8 C         SUN        12238.## 9 C         WEEK       14265.activ_step_week %&amp;gt;%   ggplot(mapping = aes(    x = breaklabel,    y = steps,    fill = stepGroup  )) +  geom_col() +  geom_text(aes(label = lapply(steps, as.integer)),             vjust=2, size=3.5, colour = &quot;white&quot;, ) +   facet_wrap(~stepGroup) +  labs(x = &quot;Days&quot;,        y = &quot;Average steps for that day&quot;,       title = &quot;Grouped distibution of average steps per weekday/weekend&quot;,       subtitle = &quot;A: &amp;lt;6000,                      B: 6000-12000,           C: &amp;gt;12000&quot;)Step 3 Importing and Cleaning SleepReading the datasetsleep &amp;lt;- read.csv(&#39;C://Users/hamda/Desktop/Portfolio Projects/3 Google/data/sleepDay_merged.csv&#39;)head(sleep)##           Id              SleepDay TotalSleepRecords TotalMinutesAsleep## 1 1503960366 4/12/2016 12:00:00 AM                 1                327## 2 1503960366 4/13/2016 12:00:00 AM                 2                384## 3 1503960366 4/15/2016 12:00:00 AM                 1                412## 4 1503960366 4/16/2016 12:00:00 AM                 2                340## 5 1503960366 4/17/2016 12:00:00 AM                 1                700## 6 1503960366 4/19/2016 12:00:00 AM                 1                304##   TotalTimeInBed## 1            346## 2            407## 3            442## 4            367## 5            712## 6            320str(sleep)## &#39;data.frame&#39;:    413 obs. of  5 variables:##  $ Id                : num  1.5e+09 1.5e+09 1.5e+09 1.5e+09 1.5e+09 ...##  $ SleepDay          : chr  &quot;4/12/2016 12:00:00 AM&quot; &quot;4/13/2016 12:00:00 AM&quot; &quot;4/15/2016 12:00:00 AM&quot; &quot;4/16/2016 12:00:00 AM&quot; ...##  $ TotalSleepRecords : int  1 2 1 2 1 1 1 1 1 1 ...##  $ TotalMinutesAsleep: int  327 384 412 340 700 304 360 325 361 430 ...##  $ TotalTimeInBed    : int  346 407 442 367 712 320 377 364 384 449 ...Cleaning and analyzing the datasetsleep %&amp;gt;%   count(Id) %&amp;gt;%   arrange(n)##            Id  n## 1  2320127002  1## 2  7007744171  2## 3  1844505072  3## 4  6775888955  3## 5  8053475328  3## 6  1644430081  4## 7  1927972279  5## 8  4558609924  5## 9  4020332650  8## 10 2347167796 15## 11 8792009665 15## ..This contains 24 distinct participants, and this was another reason whyjoining them in the beginning was not preferred. As the observations foreach individual, as well as the number of individuals are both alreadyvery less, combining them would have further reduced that numberdrastically.Out of the 24 participants with sleep data, there are 8 with less than aweek of data. We will need to remove these as well as one with 8observations as this will only hinder our analysis.One immediate difference we see is that there is timestamp in this data,but there was only one date in the activity dataset. We will also need toremove the time from this to be able to merge with activity.#Removing participants with less than 9 recordssleep &amp;lt;- sleep %&amp;gt;%   group_by(Id) %&amp;gt;%   filter(n() &amp;gt; 8)#Checking new tablesleep %&amp;gt;%   count(Id) %&amp;gt;%   arrange(n)## # A tibble: 15 x 2## # Groups:   Id [15]##            Id     n##         &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;##  1 2347167796    15##  2 8792009665    15##  3 6117666160    18##  4 4388161847    24##  5 7086361926    24##  6 1503960366    25##  7 4319703577    26##  8 5577150313    26##  9 2026352035    28## 10 3977333714    28## 11 4445114986    28## 12 4702921684    28## 13 5553957443    31## 14 6962181067    31## 15 8378563200    32The sleep data now contains 15 participants with at least 2 weeks ofrecords for each.Datetime to date:sleep &amp;lt;- sleep %&amp;gt;%   separate(SleepDay, c(&quot;ActivityDate&quot;, &quot;Time&quot;, &quot;AM/PM&quot;), &quot; &quot;) %&amp;gt;%   select(Id, ActivityDate, TotalMinutesAsleep, TotalTimeInBed)head(sleep)## # A tibble: 6 x 4## # Groups:   Id [1]##           Id ActivityDate TotalMinutesAsleep TotalTimeInBed##        &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                     &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;## 1 1503960366 4/12/2016                   327            346## 2 1503960366 4/13/2016                   384            407## 3 1503960366 4/15/2016                   412            442## 4 1503960366 4/16/2016                   340            367## 5 1503960366 4/17/2016                   700            712## 6 1503960366 4/19/2016                   304            320Combining this dataset with activity datasethead(activity)##   partID  avgstep stepGroup         Id ActivityDate TotalSteps TotalDistance## 1      1 12520.63         C 1503960366    4/12/2016      13162          8.50## 2      1 12520.63         C 1503960366    4/13/2016      10735          6.97## 3      1 12520.63         C 1503960366    4/14/2016      10460          6.74## 4      1 12520.63         C 1503960366    4/15/2016       9762          6.28## 5      1 12520.63         C 1503960366    4/16/2016      12669          8.16## 6      1 12520.63         C 1503960366    4/17/2016       9705          6.48##   TrackerDistance LoggedActivitiesDistance VeryActiveDistance## 1            8.50                        0               1.88## 2            6.97                        0               1.57## 3            6.74                        0               2.44## 4            6.28                        0               2.14## 5            8.16                        0               2.71## 6            6.48                        0               3.19##   ModeratelyActiveDistance LightActiveDistance SedentaryActiveDistance## 1                     0.55                6.06                       0## 2                     0.69                4.71                       0## 3                     0.40                3.91                       0## 4                     1.26                2.83                       0## 5                     0.41                5.04                       0## 6                     0.78                2.51                       0##   VeryActiveMinutes FairlyActiveMinutes LightlyActiveMinutes SedentaryMinutes## 1                25                  13                  328              728## 2                21                  19                  217              776## 3                30                  11                  181             1218## 4                29                  34                  209              726## 5                36                  10                  221              773## 6                38                  20                  164              539##   Calories weekday breaklabel## 1     1985       3       WEEK## 2     1797       4       WEEK## 3     1776       5       WEEK## 4     1745       6       WEEK## 5     1863       7        SAT## 6     1728       1        SUNhead(sleep)## # A tibble: 6 x 4## # Groups:   Id [1]##           Id ActivityDate TotalMinutesAsleep TotalTimeInBed##        &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                     &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;## 1 1503960366 4/12/2016                   327            346## 2 1503960366 4/13/2016                   384            407## 3 1503960366 4/15/2016                   412            442## 4 1503960366 4/16/2016                   340            367## 5 1503960366 4/17/2016                   700            712## 6 1503960366 4/19/2016                   304            320Step 4: Merging Activity and Sleepactiv_sleep &amp;lt;- merge(sleep, activity,                      by = c(&#39;Id&#39;, &#39;ActivityDate&#39;))activ_sleep %&amp;gt;%   select(    Id, partID, TotalSteps, TotalMinutesAsleep  ) %&amp;gt;%   head()##           Id partID TotalSteps TotalMinutesAsleep## 1 1503960366      1      13162                327## 2 1503960366      1      10735                384## 3 1503960366      1       9762                412## 4 1503960366      1      12669                340## 5 1503960366      1       9705                700## 6 1503960366      1      15506                304The tables have been merged on Id and date, and therefore the Sleepcolumn also has associated weekday information used previously. Beforeproceeding, checking number of observations for each participant andeach day to remove biases.# Participantsactiv_sleep %&amp;gt;%   group_by(partID) %&amp;gt;%   count() %&amp;gt;%   arrange(n)## # A tibble: 15 x 2## # Groups:   partID [15]##    partID     n##     &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;##  1      9    15##  2     32    15##  3     22    18##  4     16    24##  5     27    24##  6      1    25##  7     15    25##  8     21    26##  9      7    28## 10     12    28## 11     17    28## 12     19    28## 13     20    31## 14     25    31## 15     30    32# Weekdaysactiv_sleep %&amp;gt;%   group_by(weekday) %&amp;gt;%   count() %&amp;gt;%   arrange(n)## # A tibble: 7 x 2## # Groups:   weekday [7]##   weekday     n##     &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;## 1       2    46## 2       1    49## 3       6    51## 4       7    51## 5       3    59## 6       5    60## 7       4    62We have a good number of observations for each of our dataset and canNow proceed with our analysis.activ_sleep %&amp;gt;%   select(TotalSteps, TotalTimeInBed, TotalMinutesAsleep) %&amp;gt;%   summary()##    TotalSteps    TotalTimeInBed  TotalMinutesAsleep##  Min.   :   42   Min.   : 65.0   Min.   : 59.0     ##  1st Qu.: 5655   1st Qu.:414.2   1st Qu.:374.8     ##  Median : 9170   Median :468.0   Median :437.5     ##  Mean   : 8733   Mean   :467.4   Mean   :429.0     ##  3rd Qu.:11422   3rd Qu.:529.2   3rd Qu.:492.0     ##  Max.   :22770   Max.   :843.0   Max.   :775.0On average, a person in this dataset sleeps for 429 minutes or 7.15hours.Checking for outliersactiv_sleep %&amp;gt;%   ggplot(mapping = aes(y=TotalMinutesAsleep,                        x=as.character(partID),                       fill=&quot;Red&quot;)) +  guides(fill=&quot;none&quot;) +  geom_boxplot() +  labs(x = &quot;Participants&quot;,        y=&quot;Total Minutes Asleep&quot;,       title = &quot;Statistical distribution of Sleep vs Participants&quot;)The boxplot suggests there are some outliers present, but we cannot makeassumptions about this data as sleep time is very subjective, and bothextremes are possible for this column.Step 5: Analysis and Viz of MergedTrying to see if there is a correlation between steps and sleep timeactiv_sleep %&amp;gt;%   ggplot(mapping = aes(    x = TotalSteps,    y = TotalMinutesAsleep,    color = partID  )) +  geom_point() + guides(color=&quot;none&quot;) +   geom_smooth(color=&quot;Red&quot;) +   labs(x = &quot;Total Steps Taken&quot;,        y=&quot;Total Minutes Asleep&quot;,       title = &quot;Correlation between time slept and steps taken&quot;)## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;Looking at this graph, there doesn’t appear to be any correlationbetween the number of steps walked that day and the minutes asleep. Thisseems logical because sleep is a very subjective quality and depends ona number of physical, mental and psychological reasons.Seeing the sleeping pattern across the weekdayactiv_sleep %&amp;gt;%   group_by(weekday) %&amp;gt;%   summarize(avgsleep = mean(TotalMinutesAsleep)) %&amp;gt;%   ggplot(mapping = aes(     x = weekday,    y = avgsleep/60,    fill = -avgsleep  )) +  geom_col() + guides(fill=&quot;none&quot;) +   labs(x = &quot;Weekday&quot;,        y = &quot;Average sleep in hours&quot;,       title = &quot;Sleep distribution on each day of the week&quot;) +  scale_x_continuous(breaks = c(1,2,3,4,5,6,7),                     labels = c(&quot;SUN&quot;, &quot;MON&quot;, &quot;TUE&quot;,                                 &quot;WED&quot;, &quot;THU&quot;, &quot;FRI&quot;, &quot;SAT&quot;))activ_sleep %&amp;gt;%   group_by(partID, weekday) %&amp;gt;%   summarize(    sleepav = mean(TotalMinutesAsleep)  ) %&amp;gt;%   ggplot(mapping = aes(    x=as.character(weekday),     y=sleepav/60,     fill=-sleepav)    ) +  guides(fill=&quot;none&quot;) +  geom_col() + facet_wrap(~partID, nrow = 3) +   labs(    x = &quot;Days of the week (1-SUN)&quot;,     y = &quot;Average sleep per day in hours&quot;,    title = &quot;A look at the distribution of sleep vs weekday for each participant&quot;    )## `summarise()` has grouped output by &#39;partID&#39;. You can override using the `.groups` argument.activ_sleep %&amp;gt;%   group_by(stepGroup, weekday) %&amp;gt;%   summarize(    sleep = mean(TotalMinutesAsleep)  ) %&amp;gt;%   ggplot(mapping = aes(    x = weekday,    y = sleep/60,    fill = stepGroup  )) +  geom_col() +   scale_x_continuous(breaks = c(1,2,3,4,5,6,7)) +   facet_wrap(~stepGroup) +   labs(x = &quot;Days of the week&quot;,        y = &quot;Average sleep in hours&quot;,       title = &quot;Grouped distribution of average sleep per weekday&quot;,       subtitle = &quot;A: &amp;lt;6000,                      B: 6000-12000,           C: &amp;gt;12000&quot;)## `summarise()` has grouped output by &#39;stepGroup&#39;. You can override using the `.groups` argument.activ_sleep %&amp;gt;%   filter( SedentaryMinutes - TotalTimeInBed &amp;gt; 0) %&amp;gt;%   ggplot(mapping = aes(    x = SedentaryMinutes-TotalTimeInBed,    y = TotalMinutesAsleep/60,    color = partID  )) +  geom_point() + guides(color=&quot;none&quot;) +   geom_smooth(color=&quot;Red&quot;) +   labs(x = &quot;Corrected Sedentary Time&quot;,        y = &quot;Total sleep in hours&quot;,       title = &quot;Correlation between time slept vs sedentary minutes in the day&quot;)## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39;as1 &amp;lt;- activ_sleep %&amp;gt;%   mutate(sed = SedentaryMinutes-TotalTimeInBed,         slp = TotalMinutesAsleep) %&amp;gt;%   filter(sed &amp;gt; 0)cor(as1$sed, as1$slp)## [1] -0.7607567This tells us that there is a strong correlation between the twovariables"
  }
  
]

