[
  
  {
    "title": "R Documentation",
    "url": "/posts/R-documentation/",
    "categories": "",
    "tags": "",
    "date": "2021-11-15 00:00:00 +0530",
    





    "snippet": "Select a language :SQLRPythonGetting ready with the Datasets in BigQueryThe following file had been downloaded fromhttps://ourworldindata.org/covid-deaths on Nov 16th, 2021. To followalong or reproduce this analysis, you may choose to download the latestfile from this link, or use the files used in this project mentionedbelow.Data division into two .csv files  Shift the ‘population’ column between ‘date’ and ‘total_cases’ andsave this file as: ‘covid_full.csv’.  Delete all the columns after Z in covid_full and save this file as:‘covid_deaths.csv’  Delete all the columns from E-Z in covid_full and save this file as:‘covid_vaccinations.csv’These three edited .csv files, in addition to the original source .csvare available on the github page for this project.Loading the data into BigQuery  Go to the ‘Exlorer’ tab in the SQL Workspace.  Click on the three dots menu on your project and click on ‘Createdataset’.  Provide a dataset ID, then click on its menu and click on ‘Createtable’.  Choose the source as Upload, then select and name the appropriatetable.All the three tables will now be displayed under the dataset ID underpinned projects.Previewing the dataCovidFull:#This is a view of the first table- CovidFullSELECT *FROM CovidFUll![test](\\assets\\img\\R-documentation\\01_full.png){: width=&quot;1086&quot; height=&quot;542&quot;}CovidDeaths:--This is a view of the second table- CovidDeathsSELECT *FROM CovidDeaths![test](C:\\Users\\hamda\\repotest\\theme-test\\assets\\img\\R-documentation\\02_deaths.png)  CovidVaccinations:--This is a view of the second table- CovidDeathsSELECT *FROM CovidVaccinations![test](C:\\Users\\hamda\\Pictures\\Proj1\\03_vaccinations.png &quot;fig:&quot;)Details about the dataThese sheets contain x rows and y columnsExploration#1: Infection Percentage and Deaths-per-case PercentageThis query gives a quantitative overview of how the 20 largest countriesin the world dealed with the coronavirus.QUERY:SELECT   date, location, total_deaths, total_cases, population,  (total_deaths*100/total_cases) AS deaths_per_case_perc,  (total_cases*100/population) AS infection_percFROM   CovidDeathsWHERE   date=&#39;2021-11-15&#39; AND continent is not NULLORDER BY   population DESC  /* QUERY EXPLAINATION: - This query first of all selects the existing variables     (or columns) meantioned below, then creates two new ones.     &#39;deaths_per_case_perc&#39; is the number of deaths divided by      total cases in a country represented as a percentage.     &#39;infection_perc&#39; is the total number of cases divided by     the population of that country represented as a percentage.   - The date clause only selects the record (or row) for the      last available date in the data, therefore selects the maximum.     &#39;continent&#39; is not NULL was a requirement as only valid     country names had a continent value where they belonged.   - Finally, &#39;population DESC&#39; arranges the output sorted by the     largest population, therefore the largest countries by     population are shown first*/OUTPUT:![test](C:\\Users\\hamda\\Pictures\\Proj1\\04_deathperc.png &quot;fig:&quot;)INSIGHTS:  china  usaVISUALIZATION:![test](C:\\Users\\hamda\\Pictures\\Proj1\\05_chart.png &quot;fig:&quot;)#2: Insights at the continent scalepppppppppp inforQUERY:SELECT location, total_deaths, total_cases, population,  total_deaths*100/total_cases AS deaths_per_case_perc,  total_cases*100/population AS infection_perc,FROM CovidDeathsWHERE continent is NULL and date=&#39;2021-11-15&#39; AND   (location LIKE &#39;%a&#39; or location LIKE &#39;Europe&#39;)ORDER BY population DESC  # QUERY EXPLAINATION:# -   # - Finally, &#39;population DESC&#39; arranges the output sorted by the#     largest population, therefore the largest countries by#     population are shown firstOUTPUT AND VISUALIZATION:![test](C:\\Users\\hamda\\Pictures\\Proj1\\07_chart.png &quot;fig:&quot;)INSIGHTS:  china  usa#2: Money vs COVIDAny data contains a number of secrets just waiting to be explored. Whilegoing through the distinct locations, there were four special rows therebased on the income rather than the country. I decided to use those todemonstrate the use of GROUP BY clause in SQL.QUERY:# OPTION 1: GROUP BY for maximum valuesSELECT location, MAX(total_deaths) AS total_deaths,   MAX(total_cases) AS total_cases, MAX(population) AS population,  MAX(total_deaths)*100/MAX(total_cases) AS deaths_per_case_perc,   MAX(total_cases)*100/MAX(population) AS infection_percFROM CovidDeathsWHERE continent is NULL AND location LIKE &#39;%income&#39;GROUP BY locationORDER BY total_cases#                         OR# OPTION 2: Manually selecting date for maximum valueSELECT location, total_deaths, total_cases, population,   (total_deaths*100/total_cases) AS deaths_per_case_perc,  (total_cases*100/population) AS infection_percFROM CovidDeathsWHERE continent is NULL AND location LIKE &#39;%income&#39; AND date=&#39;2021-11-15&#39;ORDER BY total_cases# QUERY EXPLAINATION:# - This query first of all selects the existing variables#     (or columns) mentioned below, then creates two new ones.# - OPTION 1 uses the GROUP BY clause, where it has grouped the data#     by the location. You can visualize this data as a tree now,#     where each branch is location and each branches contains #     several leaves. You can choose the biggest leaf, sum of all#     the leaves, etc. I chose the maximum cases (biggest leaf)#     from all the cases of the income branch.# - OPTION 2 proceeds like the previous query, where we knew which#     date corresponds to the maximum values and we simply select#     that row or record using the WHERE clause.OUTPUT AND VISUALIZATION:![test](C:\\Users\\hamda\\Pictures\\Proj1\\06_chart.png &quot;fig:&quot;)INSIGHTS:  china  usa"
  },
  
  {
    "title": "Google Pv",
    "url": "/posts/google-pv/",
    "categories": "",
    "tags": "",
    "date": "2021-01-04 00:00:00 +0530",
    





    "snippet": "SQLRPython```{r setup, include=FALSE}knitr::opts_chunk$set(echo = TRUE, eval=TRUE)## Getting ready with the Datasets in BigQueryThe following file had been downloaded from &amp;lt;https://ourworldindata.org/covid-deaths&amp;gt; on Nov 16th, 2021. To follow along or reproduce this analysis, you may choose to download the latest file from this link, or use the files used in this project mentioned below.### Data division into two .csv files- Shift the &#39;population&#39; column between &#39;date&#39; and &#39;total_cases&#39; and save this file as: &#39;covid_full.csv&#39;.- Delete all the columns after Z in covid_full and save this file as: &#39;covid_deaths.csv&#39;- Delete all the columns from E-Z in covid_full and save this file as: &#39;covid_vaccinations.csv&#39;  These three edited .csv files, in addition to the original source .csv are available on the github page for this project.### Loading the data into BigQuery- Go to the &#39;Exlorer&#39; tab in the SQL Workspace.- Click on the three dots menu on your project and click on &#39;Create dataset&#39;.- Provide a dataset ID, then click on its menu and click on &#39;Create table&#39;.- Choose the source as Upload, then select and name the appropriate table.  All the three tables will now be displayed under the dataset ID under pinned projects.### Previewing the dataCovidFull:```{r 01_full, echo = TRUE, eval=FALSE}#This is a view of the first table- CovidFullSELECT *FROM CovidFUll![test](C:\\Users\\hamda\\Pictures\\Proj1\\01_full.png)CovidDeaths:```{r 02_deaths, echo = TRUE, eval=FALSE}#This is a view of the second table- CovidDeathsSELECT *FROM CovidDeaths&amp;lt;center&amp;gt;![test](C:\\Users\\hamda\\Pictures\\Proj1\\02_deaths.png)\\&amp;lt;/center&amp;gt;&amp;lt;br&amp;gt;CovidVaccinations:```{r 03_vaccinations, echo = TRUE, eval=FALSE}#This is a view of the second table- CovidDeathsSELECT *FROM CovidVaccinations![test](C:\\Users\\hamda\\Pictures\\Proj1\\03_vaccinations.png)Details about the dataThese sheets contain x rows and y columnsExploration#1: Infection Percentage and Deaths-per-case PercentageThis query gives a quantitative overview of how the 20 largest countries in the world dealed with the coronavirus.QUERY:```{r 04_, echo = TRUE, eval=FALSE}SELECT   date, location, total_deaths, total_cases, population,  (total_deaths100/total_cases) AS deaths_per_case_perc,  (total_cases100/population) AS infection_percFROM   CovidDeathsWHERE   date=’2021-11-15’ AND continent is not NULLORDER BY   population DESCQUERY EXPLAINATION:- This query first of all selects the existing variables(or columns) meantioned below, then creates two new ones.‘deaths_per_case_perc’ is the number of deaths divided bytotal cases in a country represented as a percentage.‘infection_perc’ is the total number of cases divided bythe population of that country represented as a percentage.- The date clause only selects the record (or row) for thelast available date in the data, therefore selects the maximum.‘continent’ is not NULL was a requirement as only validcountry names had a continent value where they belonged.- Finally, ‘population DESC’ arranges the output sorted by thelargest population, therefore the largest countries bypopulation are shown first#### OUTPUT:&amp;lt;center&amp;gt;![test](C:\\Users\\hamda\\Pictures\\Proj1\\04_deathperc.png)&amp;lt;/center&amp;gt;#### INSIGHTS:- china- usa#### VISUALIZATION:&amp;lt;center&amp;gt;![test](C:\\Users\\hamda\\Pictures\\Proj1\\05_chart.png)&amp;lt;/center&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;### #2: Insights at the continent scalepppppppppp infor#### QUERY:```{r 05_, echo = TRUE, eval=FALSE}SELECT location, total_deaths, total_cases, population,  total_deaths*100/total_cases AS deaths_per_case_perc,  total_cases*100/population AS infection_perc,FROM CovidDeathsWHERE continent is NULL and date=&#39;2021-11-15&#39; AND   (location LIKE &#39;%a&#39; or location LIKE &#39;Europe&#39;)ORDER BY population DESC  # QUERY EXPLAINATION:# -   # - Finally, &#39;population DESC&#39; arranges the output sorted by the#     largest population, therefore the largest countries by#     population are shown firstOUTPUT AND VISUALIZATION:![test](C:\\Users\\hamda\\Pictures\\Proj1\\07_chart.png)INSIGHTS:  china  usa#2: Money vs COVIDAny data contains a number of secrets just waiting to be explored. While going through the distinct locations, there were four special rows there based on the income rather than the country. I decided to use those to demonstrate the use of GROUP BY clause in SQL.QUERY:```{r 09_, echo = TRUE, eval=FALSE}OPTION 1: GROUP BY for maximum valuesSELECT location, MAX(total_deaths) AS total_deaths,   MAX(total_cases) AS total_cases, MAX(population) AS population,  MAX(total_deaths)100/MAX(total_cases) AS deaths_per_case_perc,   MAX(total_cases)100/MAX(population) AS infection_percFROM CovidDeathsWHERE continent is NULL AND location LIKE ‘%income’GROUP BY locationORDER BY total_casesOROPTION 2: Manually selecting date for maximum valueSELECT location, total_deaths, total_cases, population,   (total_deaths100/total_cases) AS deaths_per_case_perc,  (total_cases100/population) AS infection_percFROM CovidDeathsWHERE continent is NULL AND location LIKE ‘%income’ AND date=’2021-11-15’ORDER BY total_casesQUERY EXPLAINATION:- This query first of all selects the existing variables(or columns) mentioned below, then creates two new ones.- OPTION 1 uses the GROUP BY clause, where it has grouped the databy the location. You can visualize this data as a tree now,where each branch is location and each branches containsseveral leaves. You can choose the biggest leaf, sum of allthe leaves, etc. I chose the maximum cases (biggest leaf)from all the cases of the income branch.- OPTION 2 proceeds like the previous query, where we knew whichdate corresponds to the maximum values and we simply selectthat row or record using the WHERE clause.```OUTPUT AND VISUALIZATION:![test](C:\\Users\\hamda\\Pictures\\Proj1\\06_chart.png)INSIGHTS:  china  usa"
  },
  
  {
    "title": "Customize The Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "",
    "tags": "",
    "date": "2019-08-11 00:00:00 +0530",
    





    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp;amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestNow, copy the remaining image files (PNG and ICO) to cover the original files in the folder assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗              browserconfig.xml      ✗      ✓              site.webmanifest      ✗      ✓        Note: ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  }
  
]

